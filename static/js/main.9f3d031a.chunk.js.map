{"version":3,"sources":["logo.svg","Auth.jsx","App.js","serviceWorker.js","index.js","firebase-config.js"],"names":["module","exports","props","useState","email","setEmail","password","setPassword","firebase","useFirebaseApp","user","useUser","htmlFor","type","id","onChange","ev","target","value","onClick","a","async","auth","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","Formulario","submitForm","console","log","state","property","this","setState","syncChanges","placeholder","Component","Contador","aumentar","contador","Blog","articles","fetch","then","response","json","data","map","article","title","App","className","src","logo","alt","Auth","Boolean","window","location","hostname","match","ReactDOM","render","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","fallback","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f3d031a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState }  from 'react'\r\nimport 'firebase/auth';\r\nimport {useFirebaseApp, useUser} from 'reactfire';\r\n\r\n\r\nexport default (props) => {\r\n    \r\n    const [email, setEmail] = useState('');\r\n    const[password,setPassword] =useState('');\r\n    \r\n    const firebase = useFirebaseApp();\r\n    const user = useUser()\r\n    \r\n    const submit = async () => {\r\n        await firebase.auth().createUserWithEmailAndPassword(email,password);\r\n    }\r\n\r\n    const login = async () => {\r\n        await firebase.auth().signInWithEmailAndPassword(email,password);\r\n    }\r\n\r\n\r\n    const logout = async ()=> {\r\n        await firebase.auth().signOut();\r\n    }\r\n\r\n \r\n    return(\r\n        <div>\r\n            {\r\n                !user && \r\n                <div>\r\n                    <label htmlFor=\"email\">Correo Electrónico</label>\r\n                    <input type=\"email\" id=\"email\" onChange={(ev)=>setEmail(ev.target.value)}/>\r\n                    <label htmlFor=\"password\">Contraseña</label>\r\n                    <input type=\"password\" id=\"password\" onChange={(ev)=>setPassword(ev.target.value)}/>\r\n                    <button onClick={submit}>Crear cuenta</button>\r\n                    <button onClick={login}>Iniciar sesión</button>\r\n\r\n                </div>\r\n            }\r\n            \r\n            {\r\n                user && <button onClick={logout}>Cerrar sesión</button>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {\n  useUser\n} from 'reactfire';\n\nimport Auth from './Auth';\n\nclass Formulario extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      email: '',\n      password: ''\n    }\n  }\n\n  syncChanges(value,property){\n    let state = {}\n    state [property] = value;\n    this.setState(state);\n  }\n\n/*   syncEmailChanges(email){\n    this.setState({\n      email:email\n    })\n  }\n  \n  syncPasswordChanges(password){\n    this.setState({\n      password:password\n    })\n  }\n */\n  submitForm = () => {\n    console.log(this.state);\n  }\n\n  render (){\n    return (\n      <form>\n        <input\n          onChange={(ev)=>{ this.syncChanges(ev.target.value,'email')}} \n          type = \"email\" \n          placeholder = \"Email\"  \n          value={this.state.email}/>\n        <input \n          onChange={(ev)=>{ this.syncChanges(ev.target.value,'password')}}\n          type = \"password\" \n          placeholder = \"Contraseña\" \n          value={this.state.password}/>\n        <div>\n          <input \n            onClick = {this.submitForm }\n            type=\"submit\" \n            value=\"iniciar Sesión\" />\n        </div>\n      </form>\n    )\n  }\n}\n\n\nclass Contador extends Component{\n  constructor(props){\n    super(props);\n\n    this.state ={\n      contador: 0\n    }\n  }\n\n  aumentar = () =>{\n    this.setState({\n      contador: this.state.contador + 1\n    }\n  )\n  }\n  \n  render(){\n    return <div>\n      <p>Contador: {this.state.contador}</p>\n        <button onClick={this.aumentar}>\n          Aumentar\n        </button>\n    </div>\n  }\n}\n\nclass Blog extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      articles:[\n        'Mi primer componente en React',\n        'Introduccion a React',\n        'Que es React'\n      ]\n    }\n  }\n\n  componentDidMount(){\n    let promesa = fetch('https://jsonplaceholder.typicode.com/posts');\n\n    promesa.then(response => response.json()).then(data=>{\n      this.setState({\n        articles:data\n      })\n    })\n  }\n\n  render () {\n    return(\n      <div>\n        {\n          this.state.articles.map((article)=>{\n            return <p>{article.title}</p>\n          })\n        }\n \n      </div>\n    )\n  }\n}\n\n\nfunction App() {\n\n  let nombre = \"alberto\";\n\n  const user = useUser();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n       \n      </header>\n      <div>\n        <Blog>\n\n        </Blog>\n      </div>\n\n      <div>\n        <Formulario/>\n      </div>\n        <Contador></Contador>\n        <br/>\n\n        <br/>\n\n\n      <div>\n      {\n          user && <p>\n          Usuario: {user.email}\n        </p>\n        }\n        <Auth/>\n      </div>\n\n      <div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebaseConfig from './firebase-config';\nimport {\n    FirebaseAppProvider\n} from 'reactfire'\n\nReactDOM.render( (\n    <FirebaseAppProvider firebaseConfig={firebaseConfig}>\n        <Suspense fallback={'Conectando la app...'}>\n            <App />\n        </Suspense>\n    </FirebaseAppProvider>\n\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default{\r\n    apiKey: \"AIzaSyBwumU04QJ1s63xkg3LMJhOCBT5nxjQw3w\",\r\n    authDomain: \"proyecto-1-a2dae.firebaseapp.com\",\r\n    databaseURL: \"https://proyecto-1-a2dae.firebaseio.com\",\r\n    projectId: \"proyecto-1-a2dae\",\r\n    storageBucket: \"proyecto-1-a2dae.appspot.com\",\r\n    messagingSenderId: \"943611128169\",\r\n    appId: \"1:943611128169:web:b386a993ff54c5f84035f8\",\r\n    measurementId: \"G-0EKS14SXVJ\"\r\n\r\n}"],"sourceRoot":""}